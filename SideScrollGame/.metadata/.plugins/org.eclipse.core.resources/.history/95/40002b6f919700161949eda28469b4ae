package package01;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Iterator;
import java.util.LinkedList;

import javax.swing.JPanel;

/*
 * Created on 2005/06/06
 *
 */

/**
 * @author mori
 *  
 */
public class WalkMain extends JPanel implements Runnable, KeyListener {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	// パネルサイズ
    public static final int WIDTH =1056;
    public static final int HEIGHT = 720;   

    // マップ
    private Map map;

    // プレイヤー
    protected static Player player;
    
    // アクションキー
    private ActionKey goLeftKey;
    private ActionKey goRightKey;
    private ActionKey jumpKey;

    //透過用フラグ
    protected static boolean Hpflug=true;
    
    // ゲームループ用スレッド
    private Thread gameLoop;
    
    protected static Wait Hpre;

    public WalkMain(String filename) {
        // パネルの推奨サイズを設定、pack()するときに必要
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        // パネルがキー入力を受け付けるようにする
        setFocusable(true);

        // アクションキーを作成
        goLeftKey = new ActionKey();
        goRightKey = new ActionKey();
        // ジャンプだけはキーを押し続けても1回だけしかジャンプしないようにする
        jumpKey = new ActionKey(ActionKey.DETECT_INITIAL_PRESS_ONLY);

        // マップを作成
        map = new Map(filename);

        // プレイヤーを作成
        player = new Player(192, 48, map);
        

        // キーイベントリスナーを登録
        addKeyListener(this);

        // ゲームループ開始
        gameLoop = new Thread(this);
        gameLoop.start();
    }

    /**
     * ゲームオーバー
     */
    public void gameOver()
    {
    	TutorialFrame.frame.setVisible(false);
    }
    
    public void Clear()
    {
    	TutorialFrame.frame.setVisible(false);
    }

    /**
     * ゲームループ
     */
    public void run() {
        while (true) {
            if (goLeftKey.isPressed()) {
                // 左キーが押されていれば左向きに加速
                player.accelerateLeft();
            } else if (goRightKey.isPressed()) {
                // 右キーが押されていれば右向きに加速
                player.accelerateRight();
            } else {
                // 何も押されてないときは停止
                player.stop();
            }
            
            if(Player.Hp==0)
        	{
        		gameOver();
        	}

            if (jumpKey.isPressed()) {
                // ジャンプする
                player.jump();
            }

            // プレイヤーの状態を更新
            player.update();
            
            // マップにいるスプライトを取得
            LinkedList<Sprite> sprites = map.getSprites();            
            Iterator<Sprite> iterator = sprites.iterator();
            while (iterator.hasNext()) {
                Sprite sprite = (Sprite)iterator.next();
                
                // スプライトの状態を更新する
              	sprite.update();
                // プレイヤーと接触してたら
                if (player.isCollision(sprite))
                {
                	if(sprite instanceof Enemy1)
                	{
                		Enemy1 enemy1 = (Enemy1)sprite;
                        // 上から踏まれてたら
                        if ((int)player.getY()+32 < (int)enemy1.getY())
                        {
                            // 栗ボーは消える
                        	if(Hpflug==true)
                        	{
                        		enemy1.eHp1-=player.pow/2;
                        		Hpflug=false;
                        		Hpre=new Wait();
                        		Hpre.start();
                        	}
                        	else
                        	{
                        		if(enemy1.eHp1==0)
                            	{
                            		sprites.remove(enemy1);
                            	}
                        	}
                            player.setForceJump(true);
                            player.jump();
                            break;
                        }
                        else
                        {
                        	if(Hpflug==true)
                        	{
                        		Player.Hp-=5;
                        		Hpflug=false;
                        		Hpre=new Wait();
                        		Hpre.start();
                        	}
                        	else
                        	{
                        	}
                        }
                	}
                	else if(sprite instanceof Enemy2)
                	{
                		Enemy2 enemy2 = (Enemy2)sprite;
                        // 上から踏まれてたら
                        if ((int)player.getY()+32 < (int)enemy2.getY())
                        {
                            // 栗ボーは消える
                        	if(Hpflug==true)
                        	{
                        		enemy2.eHp2-=player.pow/2;
                        		Hpflug=false;
                        		Hpre=new Wait();
                        		Hpre.start();
                        	}
                        	else
                        	{
                        		if(enemy2.eHp2==0)
                            	{
                            		sprites.remove(enemy2);
                            	}
                        	}
                            player.setForceJump(true);
                            player.jump();
                            break;
                        }
                        else
                        {
                        	if(Hpflug==true)
                        	{
                        		Player.Hp-=5;
                        		Hpflug=false;
                        		Hpre=new Wait();
                        		Hpre.start();
                        	}
                        	else
                        	{
                        	}
                        }
                	}
                	else if(sprite instanceof Goal)
                	{
                		Goal goal=(Goal)sprite;
                		Clear();
                	}
                	
                }
            }
            
            // 再描画
            repaint();

            // 休止
            try {
                Thread.sleep(20);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
}

    /**
     * 描画処理
     * 
     * @param 描画オブジェクト
     */
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        // 背景を黒で塗りつぶす
        g.setColor(Color.BLACK);
        g.fillRect(0, 0, getWidth(), getHeight());

        // X方向のオフセットを計算
        int offsetX = WalkMain.WIDTH / 2 - (int)player.getX();
        // マップの端ではスクロールしないようにする
        offsetX = Math.min(offsetX, 0);
        offsetX = Math.max(offsetX, WalkMain.WIDTH - map.getWidth());

        // Y方向のオフセットを計算
        int offsetY = WalkMain.HEIGHT / 2 - (int)player.getY();
        // マップの端ではスクロールしないようにする
        offsetY = Math.min(offsetY, 0);
        offsetY = Math.max(offsetY, WalkMain.HEIGHT - map.getHeight());

        // マップを描画
        map.draw(g, offsetX, offsetY);
        
        LinkedList<Sprite> sprites=map.getSprites();
        Iterator<Sprite> sprite=sprites.iterator();
        while(sprite.hasNext())
        {
        	Sprite sp=(Sprite)sprite.next();
        	if(sp instanceof Enemy1)
        	{
        		Enemy1 enemy1=(Enemy1)sp;
        		enemy1.draw(g, offsetX, offsetY);
        	}
        	else if(sp instanceof Enemy2)
        	{
        		Enemy2 enemy2=(Enemy2)sp;
        		enemy2.draw(g, offsetX, offsetY);
        	}
        	else if(sp instanceof Goal)
        	{
        		Goal go=(Goal)sp;
        		go.draw(g, offsetX, offsetY);
        	}
        }
        // プレイヤーを描画
        player.draw(g, offsetX, offsetY);
    }

    /**
     * キーが押されたらキーの状態を「押された」に変える
     * 
     * @param e キーイベント
     */
    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();

        if (key == KeyEvent.VK_LEFT) {
            goLeftKey.press();
        }
        if (key == KeyEvent.VK_RIGHT) {
            goRightKey.press();
        }
        if (key == KeyEvent.VK_UP) {
            jumpKey.press();
        }
    }

    /**
     * キーが離されたらキーの状態を「離された」に変える
     * 
     * @param e キーイベント
     */
    public void keyReleased(KeyEvent e) {
        int key = e.getKeyCode();

        if (key == KeyEvent.VK_LEFT) {
            goLeftKey.release();
        }
        if (key == KeyEvent.VK_RIGHT) {
            goRightKey.release();
        }
        if (key == KeyEvent.VK_UP) {
            jumpKey.release();
        }
    }

    public void keyTyped(KeyEvent e) {
    }
}
